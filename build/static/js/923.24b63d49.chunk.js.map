{"version":3,"file":"static/js/923.24b63d49.chunk.js","mappings":"sJAqRA,MAMA,EANkBA,KAEdC,EAAAA,EAAAA,KAAA,OAAAC,SAAK,a","sources":["Views/Postlogin/Customers/index.js"],"sourcesContent":["// import React, { Component } from \"react\";\r\n// import { Box, Button } from \"@mui/material\";\r\n// import { connect } from \"react-redux\";\r\n// import status from \"Redux-Store/Constants\";\r\n// import { fetchCustomers } from \"Redux-Store/Customers/CustomersThunk\";\r\n// import { Loader } from \"Utils/helperFunctions\";\r\n// import GridTableWithPagination from \"../Components/GridTableWithPagination\";\r\n// import { Link } from \"react-router-dom\";\r\n// import TablesHeaderFilters from \"Views/Postlogin/Components/TablesHeaderFilters\";\r\n// import { QUOTATIONS_FILTER_STATUS} from \"CommonData\";\r\n// const columns = [\r\n//   {\r\n//     field: \"customer_name\",\r\n//     headerName: \"Customer Name\",\r\n//     width: 150,\r\n//     renderCell: (params) => <Link to={params.value}>{params.value}</Link>,\r\n//   },\r\n//   {\r\n//     field: \"email\",\r\n//     headerName: \"Email\",\r\n//     width: 180,\r\n//     renderCell: (data) => {\r\n//       return data.value;\r\n//     },\r\n//   },\r\n//   {\r\n//     field: \"shipping_address\",\r\n//     headerName: \"Shipping Address\",\r\n//     width: 250,\r\n//     renderCell: (data) => {\r\n//       return data.value;\r\n//     },\r\n//   },\r\n//   {\r\n//     field: \"added_by\",\r\n//     headerName: \"Added By\",\r\n//     width: 130,\r\n//     renderCell: (data) => {\r\n//       return data.value;\r\n//     },\r\n//   },\r\n//   {\r\n//     field: \"added_on\",\r\n//     headerName: \"Added On\",\r\n//     width: 180,\r\n//     renderCell: (data) => {\r\n//       return data.value;\r\n//     },\r\n//   },\r\n//   {\r\n//     field: \"last_order\",\r\n//     headerName: \"Last Order\",\r\n//     width: 180,\r\n//     renderCell: (data) => {\r\n//       return data.value;\r\n//     },\r\n//   },\r\n//   {\r\n//     field: \"actions\",\r\n//     headerName: \"Actions\",\r\n//     width: 240,\r\n//     renderCell: (data) => {\r\n//       return (\r\n//         <div className=\"table-btns\">\r\n//           <Button className=\"primary-outline\" variant=\"primary\">\r\n//             View More\r\n//           </Button>\r\n//           <Button className=\"primary\" variant=\"primary\">\r\n//             Create Quotes\r\n//           </Button>\r\n//         </div>\r\n//       );\r\n//     },\r\n//   }\r\n  \r\n// ];\r\n\r\n// let {FAVOURITE_CUSTOMER, NEW_CUSTOMER } =\r\n//   QUOTATIONS_FILTER_STATUS;\r\n\r\n// const filterItems = [\r\n//   {\r\n//     label: \"All\",\r\n//   },\r\n//   {\r\n//     label: FAVOURITE_CUSTOMER,\r\n//   },\r\n//   {\r\n//     label: NEW_CUSTOMER,\r\n//   },\r\n \r\n// ];\r\n\r\n// class Customers extends Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//     this.state = {\r\n//       customersData: [],\r\n//       selectedFilters: [],\r\n//       paginationDetails: { pageSize: 10, page: 0 },\r\n//     };\r\n//   }\r\n\r\n//   componentDidMount = () => {\r\n//     this.props.fetchCustomers();\r\n//   };\r\n\r\n//   componentDidUpdate(prevProps, prevState) {\r\n//     if (\r\n//       prevProps.customers.status !== this.props.customers.status &&\r\n//       this.props.customers.status === status.SUCCESS &&\r\n//       this.props.customers?.data\r\n//     ) {\r\n//       this.manipulationData(this.props.customers?.data.customers || []);\r\n//     }\r\n//   }\r\n//   manipulationData(data, searchData = \"\", isApply = 0) {\r\n//     let { customersData, selectedFilters } = this.state;\r\n//     customersData = [];\r\n//     if (data?.length) {\r\n//       let customers = JSON.parse(JSON.stringify(data));\r\n//       if (searchData) {\r\n//         customers = data.filter((tableData) => {\r\n//           if (\r\n//             tableData?.customer_name\r\n//               .toLowerCase()\r\n//               .includes(searchData.toLowerCase()) ||\r\n//             tableData?.added_by\r\n//               .toLowerCase()\r\n//               .includes(searchData.toLowerCase()) ||\r\n//             tableData?.added_on\r\n//               .toLowerCase()\r\n//               .includes(searchData.toLowerCase()) ||\r\n//             tableData?.email.toLowerCase().includes(searchData.toLowerCase()) ||\r\n//             tableData?.last_order\r\n//               .toLowerCase()\r\n//               .includes(searchData.toLowerCase()) ||\r\n//             tableData?.shipping_address\r\n//               .toLowerCase()\r\n//               .includes(searchData.toLowerCase())\r\n//           ) {\r\n//             return true;\r\n//           } else {\r\n//             return null;\r\n//           }\r\n//         });\r\n//       }\r\n//       if (isApply) {\r\n//         customers = customers.filter((tableData) => {\r\n//           return selectedFilters.includes(\r\n//             tableData.status.toLowerCase().replace(\" \", \"_\")\r\n//           );\r\n//         });\r\n//       } else {\r\n//         selectedFilters = [];\r\n//       }\r\n\r\n//       customers.forEach((customers) => {\r\n//         customersData.push({\r\n//           ...customers,\r\n//           statusClass: customers?.status?.toLowerCase()?.replace(\" \", \"_\"),\r\n//         });\r\n//       });\r\n//     }\r\n//     this.setState({ customersData, searchData, selectedFilters });\r\n//   }\r\n//   render() {\r\n//     const {\r\n//       customersData,\r\n//       paginationDetails: { page, pageSize },\r\n//       searchData,\r\n//       selectedFilters,\r\n//     } = this.state;\r\n//     const startDataNo = page * pageSize + 1;\r\n//     const endDataNo = page * pageSize + pageSize;\r\n//     return (\r\n//       <Box className=\"main-container\">\r\n//         <Box className=\"qutations-container\">\r\n//           <TablesHeaderFilters\r\n//             details={{\r\n//               header: \"Customers\",\r\n//               filterLabel: \"\",\r\n//               exportCsv: \"Export as CSV\",\r\n//               importCsv: \"Import\",\r\n//               isOnlySearchVisible: false,\r\n//               btnLabel: \"Customers\",\r\n\r\n//               dataLength: customersData.length,\r\n//               searchData,\r\n//               dataRange: customersData.length ? (\r\n//                 <>\r\n//                   <strong>\r\n//                     {startDataNo} -{endDataNo}\r\n//                   </strong>\r\n//                 </>\r\n//               ) : (\r\n//                 0\r\n//               ),\r\n//               filter: {\r\n//                 label: \"Filters\",\r\n//                 data: filterItems,\r\n//                 header: \"Status\",\r\n//                 selectedFilters,\r\n//               },\r\n//             }}\r\n//             handleSearch={(searchData) => {\r\n//               this.manipulationData(\r\n//                 this.props.customers?.data.customers || [],\r\n//                 searchData\r\n//               );\r\n//             }}\r\n//             handleFilters={(label, prevFilters) => {\r\n//               let { selectedFilters } = this.state;\r\n//               if (prevFilters) {\r\n//                 selectedFilters = prevFilters;\r\n//               } else {\r\n//                 if (selectedFilters.includes(label)) {\r\n//                   if (label === \"all\") {\r\n//                     selectedFilters = [];\r\n//                   } else {\r\n//                     selectedFilters = selectedFilters.filter(\r\n//                       (item) => ![label, \"all\"].includes(item)\r\n//                     );\r\n//                   }\r\n//                 } else {\r\n//                   if (label === \"all\") {\r\n//                     selectedFilters = filterItems.map((item) =>\r\n//                       item.label.toLowerCase().replace(\" \", \"_\")\r\n//                     );\r\n//                   } else {\r\n//                     selectedFilters.push(label);\r\n//                   }\r\n//                 }\r\n//               }\r\n//               console.log(selectedFilters, prevFilters);\r\n//               this.setState({ selectedFilters });\r\n//             }}\r\n//             applyOrCancelFilter={(isApply) => {\r\n//               this.manipulationData(\r\n//                 this.props.quotations?.data.quotations || [],\r\n//                 searchData,\r\n//                 isApply ? 1 : 0\r\n//               );\r\n//             }}\r\n//           />\r\n\r\n//           {this.props.customers.status === status.IN_PROGRESS ? (\r\n//             Loader.commonLoader()\r\n//           ) : (\r\n//             <GridTableWithPagination\r\n//               details={{\r\n//                 paginationDetails: { page, pageSize },\r\n//                 pagSize: 10,\r\n//                 data: customersData,\r\n//                 columns,\r\n//                 checkboxSelection: true,\r\n//               }}\r\n//               handlePageChange={(paginationDetails) => {\r\n//                 this.setState({ paginationDetails });\r\n//               }}\r\n//             />\r\n//           )}\r\n//         </Box>\r\n//       </Box>\r\n//     );\r\n//   }\r\n// }\r\n// function mapStateToProps(state) {\r\n//   const { customers } = state.customers;\r\n//   return { customers };\r\n// }\r\n\r\n// const mapDispatchToProps = { fetchCustomers };\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(Customers);\r\nimport React from 'react'\r\n\r\nconst Customers = () => {\r\n  return (\r\n    <div>Customers</div>\r\n  )\r\n}\r\n\r\nexport default Customers"],"names":["Customers","_jsx","children"],"sourceRoot":""}