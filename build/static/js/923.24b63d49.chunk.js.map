{"version":3,"file":"static/js/923.24b63d49.chunk.js","mappings":"sJAqRA,MAMA,EANkBA,KAEdC,EAAAA,EAAAA,KAAA,OAAAC,SAAK,a","sources":["Views/Postlogin/Customers/index.js"],"sourcesContent":["// import React, { Component } from \"react\";\n// import { Box, Button } from \"@mui/material\";\n// import { connect } from \"react-redux\";\n// import status from \"Redux-Store/Constants\";\n// import { fetchCustomers } from \"Redux-Store/Customers/CustomersThunk\";\n// import { Loader } from \"Utils/helperFunctions\";\n// import GridTableWithPagination from \"../Components/GridTableWithPagination\";\n// import { Link } from \"react-router-dom\";\n// import TablesHeaderFilters from \"Views/Postlogin/Components/TablesHeaderFilters\";\n// import { QUOTATIONS_FILTER_STATUS} from \"CommonData\";\n// const columns = [\n//   {\n//     field: \"customer_name\",\n//     headerName: \"Customer Name\",\n//     width: 150,\n//     renderCell: (params) => <Link to={params.value}>{params.value}</Link>,\n//   },\n//   {\n//     field: \"email\",\n//     headerName: \"Email\",\n//     width: 180,\n//     renderCell: (data) => {\n//       return data.value;\n//     },\n//   },\n//   {\n//     field: \"shipping_address\",\n//     headerName: \"Shipping Address\",\n//     width: 250,\n//     renderCell: (data) => {\n//       return data.value;\n//     },\n//   },\n//   {\n//     field: \"added_by\",\n//     headerName: \"Added By\",\n//     width: 130,\n//     renderCell: (data) => {\n//       return data.value;\n//     },\n//   },\n//   {\n//     field: \"added_on\",\n//     headerName: \"Added On\",\n//     width: 180,\n//     renderCell: (data) => {\n//       return data.value;\n//     },\n//   },\n//   {\n//     field: \"last_order\",\n//     headerName: \"Last Order\",\n//     width: 180,\n//     renderCell: (data) => {\n//       return data.value;\n//     },\n//   },\n//   {\n//     field: \"actions\",\n//     headerName: \"Actions\",\n//     width: 240,\n//     renderCell: (data) => {\n//       return (\n//         <div className=\"table-btns\">\n//           <Button className=\"primary-outline\" variant=\"primary\">\n//             View More\n//           </Button>\n//           <Button className=\"primary\" variant=\"primary\">\n//             Create Quotes\n//           </Button>\n//         </div>\n//       );\n//     },\n//   }\n  \n// ];\n\n// let {FAVOURITE_CUSTOMER, NEW_CUSTOMER } =\n//   QUOTATIONS_FILTER_STATUS;\n\n// const filterItems = [\n//   {\n//     label: \"All\",\n//   },\n//   {\n//     label: FAVOURITE_CUSTOMER,\n//   },\n//   {\n//     label: NEW_CUSTOMER,\n//   },\n \n// ];\n\n// class Customers extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       customersData: [],\n//       selectedFilters: [],\n//       paginationDetails: { pageSize: 10, page: 0 },\n//     };\n//   }\n\n//   componentDidMount = () => {\n//     this.props.fetchCustomers();\n//   };\n\n//   componentDidUpdate(prevProps, prevState) {\n//     if (\n//       prevProps.customers.status !== this.props.customers.status &&\n//       this.props.customers.status === status.SUCCESS &&\n//       this.props.customers?.data\n//     ) {\n//       this.manipulationData(this.props.customers?.data.customers || []);\n//     }\n//   }\n//   manipulationData(data, searchData = \"\", isApply = 0) {\n//     let { customersData, selectedFilters } = this.state;\n//     customersData = [];\n//     if (data?.length) {\n//       let customers = JSON.parse(JSON.stringify(data));\n//       if (searchData) {\n//         customers = data.filter((tableData) => {\n//           if (\n//             tableData?.customer_name\n//               .toLowerCase()\n//               .includes(searchData.toLowerCase()) ||\n//             tableData?.added_by\n//               .toLowerCase()\n//               .includes(searchData.toLowerCase()) ||\n//             tableData?.added_on\n//               .toLowerCase()\n//               .includes(searchData.toLowerCase()) ||\n//             tableData?.email.toLowerCase().includes(searchData.toLowerCase()) ||\n//             tableData?.last_order\n//               .toLowerCase()\n//               .includes(searchData.toLowerCase()) ||\n//             tableData?.shipping_address\n//               .toLowerCase()\n//               .includes(searchData.toLowerCase())\n//           ) {\n//             return true;\n//           } else {\n//             return null;\n//           }\n//         });\n//       }\n//       if (isApply) {\n//         customers = customers.filter((tableData) => {\n//           return selectedFilters.includes(\n//             tableData.status.toLowerCase().replace(\" \", \"_\")\n//           );\n//         });\n//       } else {\n//         selectedFilters = [];\n//       }\n\n//       customers.forEach((customers) => {\n//         customersData.push({\n//           ...customers,\n//           statusClass: customers?.status?.toLowerCase()?.replace(\" \", \"_\"),\n//         });\n//       });\n//     }\n//     this.setState({ customersData, searchData, selectedFilters });\n//   }\n//   render() {\n//     const {\n//       customersData,\n//       paginationDetails: { page, pageSize },\n//       searchData,\n//       selectedFilters,\n//     } = this.state;\n//     const startDataNo = page * pageSize + 1;\n//     const endDataNo = page * pageSize + pageSize;\n//     return (\n//       <Box className=\"main-container\">\n//         <Box className=\"qutations-container\">\n//           <TablesHeaderFilters\n//             details={{\n//               header: \"Customers\",\n//               filterLabel: \"\",\n//               exportCsv: \"Export as CSV\",\n//               importCsv: \"Import\",\n//               isOnlySearchVisible: false,\n//               btnLabel: \"Customers\",\n\n//               dataLength: customersData.length,\n//               searchData,\n//               dataRange: customersData.length ? (\n//                 <>\n//                   <strong>\n//                     {startDataNo} -{endDataNo}\n//                   </strong>\n//                 </>\n//               ) : (\n//                 0\n//               ),\n//               filter: {\n//                 label: \"Filters\",\n//                 data: filterItems,\n//                 header: \"Status\",\n//                 selectedFilters,\n//               },\n//             }}\n//             handleSearch={(searchData) => {\n//               this.manipulationData(\n//                 this.props.customers?.data.customers || [],\n//                 searchData\n//               );\n//             }}\n//             handleFilters={(label, prevFilters) => {\n//               let { selectedFilters } = this.state;\n//               if (prevFilters) {\n//                 selectedFilters = prevFilters;\n//               } else {\n//                 if (selectedFilters.includes(label)) {\n//                   if (label === \"all\") {\n//                     selectedFilters = [];\n//                   } else {\n//                     selectedFilters = selectedFilters.filter(\n//                       (item) => ![label, \"all\"].includes(item)\n//                     );\n//                   }\n//                 } else {\n//                   if (label === \"all\") {\n//                     selectedFilters = filterItems.map((item) =>\n//                       item.label.toLowerCase().replace(\" \", \"_\")\n//                     );\n//                   } else {\n//                     selectedFilters.push(label);\n//                   }\n//                 }\n//               }\n//               console.log(selectedFilters, prevFilters);\n//               this.setState({ selectedFilters });\n//             }}\n//             applyOrCancelFilter={(isApply) => {\n//               this.manipulationData(\n//                 this.props.quotations?.data.quotations || [],\n//                 searchData,\n//                 isApply ? 1 : 0\n//               );\n//             }}\n//           />\n\n//           {this.props.customers.status === status.IN_PROGRESS ? (\n//             Loader.commonLoader()\n//           ) : (\n//             <GridTableWithPagination\n//               details={{\n//                 paginationDetails: { page, pageSize },\n//                 pagSize: 10,\n//                 data: customersData,\n//                 columns,\n//                 checkboxSelection: true,\n//               }}\n//               handlePageChange={(paginationDetails) => {\n//                 this.setState({ paginationDetails });\n//               }}\n//             />\n//           )}\n//         </Box>\n//       </Box>\n//     );\n//   }\n// }\n// function mapStateToProps(state) {\n//   const { customers } = state.customers;\n//   return { customers };\n// }\n\n// const mapDispatchToProps = { fetchCustomers };\n\n// export default connect(mapStateToProps, mapDispatchToProps)(Customers);\nimport React from 'react'\n\nconst Customers = () => {\n  return (\n    <div>Customers</div>\n  )\n}\n\nexport default Customers"],"names":["Customers","_jsx","children"],"sourceRoot":""}