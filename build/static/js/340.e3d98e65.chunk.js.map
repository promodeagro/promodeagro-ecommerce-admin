{"version":3,"file":"static/js/340.e3d98e65.chunk.js","mappings":"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","sources":["Views/PreLogin/Signin.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { authSignIn } from \"Redux-Store/authenticate/auth/authThunk\"; \r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Button, FormField, Input, Container } from \"@cloudscape-design/components\";\r\nimport { LuEyeOff } from \"react-icons/lu\";\r\nimport { FiEye } from \"react-icons/fi\";\r\n\r\nconst Signin = () => {\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n  const { loading, error, isAuthenticated } = useSelector((state) => state.auth); \r\n  const [items, setItems] = React.useState([]);\r\n const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [passwordVisible, setPasswordVisible] = useState(false);\r\n  const [emailError, setEmailError] = useState(\"\");\r\n  const [passwordError, setPasswordError] = useState(\"\");\r\n  const [emailInvalid, setEmailInvalid] = useState(false);\r\n  const [showErrorMessage, setShowErrorMessage] = useState(false);\r\n  const [passwordInvalid, setPasswordInvalid] = useState(false);\r\n\r\n  const handleLogin = (e) => {\r\n    e.preventDefault();\r\n\r\n    setEmailError(\"\");\r\n    setPasswordError(\"\");\r\n    setEmailInvalid(false);\r\n    setPasswordInvalid(false);\r\n    setShowErrorMessage(false); // Reset error message visibility\r\n  \r\n    let hasError = false;\r\n  \r\n    if (!email) {\r\n      setEmailError(\"Email is required.\");\r\n      setEmailInvalid(true);\r\n      hasError = true;\r\n    }\r\n    if (!password) {\r\n      setPasswordError(\"Password is required.\");\r\n      setPasswordInvalid(true);\r\n      hasError = true;\r\n    }\r\n  \r\n    if (hasError) {\r\n      return; // Prevent login if there are errors\r\n    }\r\n    \r\n    dispatch(authSignIn({ email, password }))\r\n      .unwrap()\r\n      .then((response) => {\r\n        console.log(\"Signin Response:\", response.accessToken);\r\n        localStorage.setItem(\"user\", JSON.stringify(response));\r\n        localStorage.setItem(\"userEmail\", email);\r\n\r\n        setItems([{\r\n          type: \"success\",\r\n          content: \"Signin Successful!\",\r\n          dismissible: true,\r\n          dismissLabel: \"Dismiss message\",\r\n          onDismiss: () => setItems([]),\r\n          id: \"message_1\",\r\n        }]);\r\n  \r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Login failed:\", error);\r\n        setShowErrorMessage(true);\r\n        setEmailInvalid(false);\r\n        setPasswordInvalid(false);\r\n      \r\n        // Extract validation messages from error\r\n        const errorMessage = error.message.toLowerCase();\r\n      \r\n        // Check for specific validation errors\r\n        if (errorMessage.includes(\"invalid email\")) {\r\n          setEmailInvalid(true);\r\n          // setEmailError(\"Invalid email format.\"); // Set email-specific error message\r\n        }\r\n        \r\n        if (errorMessage.includes(\"password must be at least 8 characters\")) {\r\n          setPasswordInvalid(true);\r\n          // setPasswordError(\"Password must be at least 8 characters.\"); // Set password-specific error message\r\n        }\r\n        if (errorMessage.includes(\"incorrect username or password\")) {\r\n          setPasswordInvalid(true);\r\n          setEmailInvalid(true);\r\n\r\n        }\r\n\r\n      \r\n        setItems([{\r\n          type: \"error\",\r\n          content: `Signin Failed: ${error.message}`,\r\n          dismissible: true,\r\n          dismissLabel: \"Dismiss message\",\r\n          onDismiss: () => setItems([]),\r\n          id: \"message_2\",\r\n        }]);\r\n      });\r\n        };\r\n  \r\n  useEffect(() => {\r\n    if (isAuthenticated) {\r\n      navigate(\"/app/dashboard\");\r\n    }\r\n  }, [isAuthenticated, navigate]);\r\n\r\n  // Handling field change to reset the error state\r\n  const handleEmailChange = (e) => {\r\n    setEmail(e.detail.value);\r\n\r\n    // Only reset email-specific errors when typing in the email field\r\n    if (emailInvalid) setEmailInvalid(false); // Clear invalid state for email\r\n    if (emailError) setEmailError(\"\"); // Clear email error\r\n    if (showErrorMessage && !passwordInvalid) {\r\n      setShowErrorMessage(false); // Only hide error message if password is also valid\r\n    }\r\n  };\r\n\r\n  const handlePasswordChange = (e) => {\r\n    setPassword(e.detail.value);\r\n\r\n    // Only reset password-specific errors when typing in the password field\r\n    if (passwordInvalid) setPasswordInvalid(false); // Clear invalid state for password\r\n    if (passwordError) setPasswordError(\"\"); // Clear password error\r\n    if (showErrorMessage && !emailInvalid) {\r\n      setShowErrorMessage(false); // Only hide error message if email is also valid\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div style={{\r\n        position: \"absolute\",\r\n        top: \"50%\",\r\n        left: \"50%\",\r\n        transform: \"translate(-50%, -50%)\",\r\n        width: \"24rem\",\r\n        height: \"22rem\",\r\n        borderRadius: \"10px\",\r\n        backgroundColor: \"white\",\r\n        boxShadow: \"0 1px 8px rgba(0, 0, 0, 0.2)\",\r\n        zIndex: \"12929\",\r\n      }}>\r\n        <Container variant=\"borderless\">\r\n          <div style={{ textAlign: \"center\", marginBottom: \"20px\" }}>\r\n            <h2>Welcome</h2>\r\n            <p style={{ color: \"gray\", marginTop: \"6px\" }}>Login to your account</p>\r\n          </div>\r\n\r\n          <form style={{ display: \"flex\", flexDirection: \"column\", gap: \"10px\" }} onSubmit={handleLogin}>\r\n            <FormField label=\"Email\"  errorText={emailError}\r\n            >\r\n              <Input\r\n                placeholder=\"Enter Your Email\"\r\n                value={email}\r\n                onChange={handleEmailChange} // Updated to handle field changes\r\n                invalid={emailInvalid} // Mark input as invalid if validation fails\r\n\r\n              />\r\n            </FormField>\r\n            <FormField label=\"Password\"   errorText={passwordError  }\r\n            >\r\n              <div style={{ position: \"relative\", width: \"100%\" }}>\r\n                <Input\r\n                  type={passwordVisible ? \"text\" : \"password\"}\r\n                  placeholder=\"Enter your Password\"\r\n                  value={password}\r\n                  onChange={handlePasswordChange} // Updated to handle field changes\r\n                  style={{ paddingRight: \"40px\" }}\r\n                  invalid={passwordInvalid} // Mark input as invalid if validation fails\r\n\r\n                />\r\n                <div\r\n                  onClick={() => setPasswordVisible(!passwordVisible)}\r\n                  style={{\r\n                    position: \"absolute\",\r\n                    right: \"10px\",\r\n                    top: \"50%\",\r\n                    transform: \"translateY(-50%)\",\r\n                    cursor: \"pointer\",\r\n                    color: \"#8B8D97\",\r\n                  }}\r\n                >\r\n                  {passwordVisible ? <FiEye /> : <LuEyeOff />}\r\n                </div>\r\n              </div>\r\n            </FormField>\r\n            {showErrorMessage && error && (\r\n              <p style={{ color: \"red\", fontSize: '13px' }}>{error.message}</p>\r\n            )}\r\n            <div style={{ display: \"flex\", justifyContent: \"end\" }}>\r\n              <Button href=\"/auth/forgot-password\" variant=\"inline-link\">\r\n                Forgot Password\r\n              </Button>\r\n            </div>\r\n            <div style={{ display: \"flex\", justifyContent: \"center\", padding: \"0vh 2vw\" }}>\r\n              <Button type=\"submit\" fullWidth variant=\"primary\" disabled={loading}>\r\n                {loading ? \"Logging in...\" : \"Login\"}\r\n              </Button>\r\n            </div>\r\n          </form>\r\n        </Container>\r\n      </div>\r\n      <div style={{\r\n        position: \"absolute\",\r\n        bottom: 0,\r\n        left: 0,\r\n        width: \"100%\",\r\n        overflow: \"hidden\",\r\n        lineHeight: 0,\r\n      }}>\r\n        <svg viewBox=\"0 0 1130 320\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <defs>\r\n            <linearGradient id=\"gradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\">\r\n              <stop offset=\"0%\" style={{ stopColor: \"#9f4bad\", stopOpacity: 1 }} />\r\n              <stop offset=\"50%\" style={{ stopColor: \"#f8a4b8\", stopOpacity: 1 }} />\r\n              <stop offset=\"100%\" style={{ stopColor: \"#e2e290\", stopOpacity: 1 }} />\r\n            </linearGradient>\r\n          </defs>\r\n          <path\r\n            fill=\"url(#gradient)\"\r\n            fillOpacity=\"0.98\"\r\n            d=\"M0,160L60,176C120,192,240,224,360,213.3C480,203,600,149,720,117.3C840,85,960,75,1080,85.3C1200,96,1320,128,1380,144L1440,160L1440,320L1380,320C1320,320,1200,320,1080,320C960,320,840,320,720,320C600,320,480,320,360,320C240,320,120,320,60,320L0,320Z\"\r\n          />\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Signin;\r\n"],"names":["Signin","navigate","useNavigate","dispatch","useDispatch","loading","error","isAuthenticated","useSelector","state","auth","items","setItems","React","email","setEmail","useState","password","setPassword","passwordVisible","setPasswordVisible","emailError","setEmailError","passwordError","setPasswordError","emailInvalid","setEmailInvalid","showErrorMessage","setShowErrorMessage","passwordInvalid","setPasswordInvalid","useEffect","_jsxs","children","_jsx","style","position","top","left","transform","width","height","borderRadius","backgroundColor","boxShadow","zIndex","Container","variant","textAlign","marginBottom","color","marginTop","display","flexDirection","gap","onSubmit","e","preventDefault","hasError","authSignIn","unwrap","then","response","console","log","accessToken","localStorage","setItem","JSON","stringify","type","content","dismissible","dismissLabel","onDismiss","id","catch","errorMessage","message","toLowerCase","includes","concat","FormField","label","errorText","Input","placeholder","value","onChange","detail","invalid","paddingRight","onClick","right","cursor","FiEye","LuEyeOff","fontSize","justifyContent","Button","href","padding","fullWidth","disabled","bottom","overflow","lineHeight","viewBox","xmlns","x1","y1","x2","offset","stopColor","stopOpacity","fill","fillOpacity","d"],"sourceRoot":""}