{"version":3,"file":"static/js/778.b2d4e01b.chunk.js","mappings":"wJAkmBA,MAAMA,UAAkBC,EAAAA,UACtBC,MAAAA,GACE,OACEC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,kBAInB,EAEF,S","sources":["Views/Postlogin/Dashboard/index.js"],"sourcesContent":["// import React, { Component } from 'react';\r\n// import {\r\n//   AppLayout,\r\n//   BreadcrumbGroup,\r\n//   Container,\r\n//   ContentLayout,\r\n//   Flashbar,\r\n//   Header,\r\n//   HelpPanel,\r\n//   Link,\r\n//   SideNavigation,\r\n//   SplitPanel,\r\n// } from '@cloudscape-design/components';\r\n// import { I18nProvider } from '@cloudscape-design/components/i18n';\r\n// import messages from '@cloudscape-design/components/i18n/messages/all.en';\r\n// import PieChart from \"@cloudscape-design/components/pie-chart\";\r\n// import AreaChart from \"@cloudscape-design/components/area-chart\";\r\n// import BarChart from \"@cloudscape-design/components/bar-chart\";\r\n// import Table from \"@cloudscape-design/components/table\";\r\n// import Button from \"@cloudscape-design/components/button\";\r\n// import Box from \"@cloudscape-design/components/box\";\r\n// import MixedLineBarChart from \"@cloudscape-design/components/mixed-line-bar-chart\";\r\n// // import Container from \"@cloudscape-design/components/container\";\r\n// // import Header from \"@cloudscape-design/components/header\";\r\n// import SpaceBetween from \"@cloudscape-design/components/space-between\";\r\n// // import Link from \"@cloudscape-design/components/link\";\r\n// import Alert from \"@cloudscape-design/components/alert\";\r\n\r\n// const LOCALE = 'en';\r\n\r\n// const navItems = [\r\n//   { text: 'Home', href: '#' },\r\n//   { text: 'Service', href: '#' },\r\n// ];\r\n\r\n// const barData = {\r\n//   labels: ['January', 'February', 'March', 'April', 'May'],\r\n//   datasets: [\r\n//     {\r\n//       label: 'Sales',\r\n//       data: [300, 500, 100, 400, 600],\r\n//       backgroundColor: 'rgba(75, 192, 192, 0.6)',\r\n//     },\r\n//   ],\r\n// };\r\n\r\n// const tableData = [\r\n//   { id: '1', name: 'John Doe', email: 'john@example.com', role: 'Admin' },\r\n//   { id: '2', name: 'Jane Smith', email: 'jane@example.com', role: 'User' },\r\n//   { id: '1', name: 'John Doe', email: 'john@example.com', role: 'Admin' },\r\n//   { id: '2', name: 'Jane Smith', email: 'jane@example.com', role: 'User' },\r\n//   { id: '1', name: 'John Doe', email: 'john@example.com', role: 'Admin' },\r\n//   { id: '2', name: 'Jane Smith', email: 'jane@example.com', role: 'User' },\r\n// ];\r\n\r\n// const columnDefinitions = [\r\n//   { id: 'name', header: 'Name', cell: item => item.name },\r\n//   { id: 'email', header: 'Email', cell: item => item.email },\r\n//   { id: 'role', header: 'Role', cell: item => item.role },\r\n// ];\r\n\r\n// class UserDashboard extends Component {\r\n//   render() {\r\n//     return (\r\n//       <I18nProvider locale={LOCALE} messages={[messages]}>\r\n//         <AppLayout\r\n//           breadcrumbs={\r\n//             <BreadcrumbGroup\r\n//               items={[\r\n//                 { text: 'Home', href: '#' },\r\n//                 { text: 'Service', href: '#' },\r\n//               ]}\r\n//             />\r\n//           }\r\n//           navigationOpen={true}\r\n//           navigation={\r\n//             <div style={{ width: '200px' }} >\r\n//             <SideNavigation\r\n//             // Adjust the width as per your requirement\r\n//             header={{\r\n//               href: '#',\r\n//               text: 'Service name',\r\n//             }}\r\n//             items={[\r\n//               { type: 'link', text: `Page #1`, href: `#` },\r\n//               { type: 'link', text: `Page #2`, href: `#` },\r\n//               { type: 'link', text: `Page #3`, href: `#` },\r\n//               { type: 'link', text: `Page #4`, href: `#` },\r\n//               { type: 'link', text: `Page #5`, href: `#` }\r\n//             ]}\r\n//           />\r\n//           </div>\r\n          \r\n//           }\r\n//           notifications={\r\n//             <Flashbar\r\n//               items={[\r\n//                 {\r\n//                   type: 'info',\r\n//                   dismissible: true,\r\n//                   content: 'This is an info flash message.',\r\n//                   id: 'message_1',\r\n//                 },\r\n//               ]}\r\n//             />\r\n//           }\r\n//           tools={<HelpPanel header={<h2>Overview</h2>}>Help content</HelpPanel>}\r\n//           content={\r\n//             <ContentLayout\r\n//               header={\r\n//                 <Header variant=\"h1\" info={<Link variant=\"info\">Info</Link>}>\r\n//                   Page header\r\n//                 </Header>\r\n//               }\r\n//             >\r\n//               <Container\r\n//                 header={\r\n//                   <Header variant=\"h2\" description=\"Container description\">\r\n//                     Container header\r\n//                   </Header>\r\n//                 }\r\n//               >\r\n//                 <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gridColumnGap: '10px' }}>\r\n     \r\n//                 <Table style={{ height: '200px'}}\r\n//                     columnDefinitions={columnDefinitions}\r\n//                     items={tableData}\r\n//                     header={<Header variant=\"h2\">User Table</Header>}\r\n//                     trackBy=\"id\"\r\n//                   />\r\n//                      <ContentLayout\r\n//       defaultPadding\r\n//       header={\r\n//         <SpaceBetween size=\"m\">\r\n//           <Header\r\n//             variant=\"h1\"\r\n//             info={<Link variant=\"info\">Info</Link>}\r\n//             description=\"This is a generic description used in the header.\"\r\n//           >\r\n//             Header\r\n//           </Header>\r\n\r\n//           <Alert statusIconAriaLabel=\"Info\">\r\n//             This is a generic alert.\r\n//           </Alert>\r\n//         </SpaceBetween>\r\n//       }\r\n//     >\r\n//       <Container\r\n//         header={\r\n//           <Header\r\n//             variant=\"h2\"\r\n//             description=\"Container description\"\r\n//           >\r\n//             Container header\r\n//           </Header>\r\n//         }\r\n//       >\r\n//         Container content\r\n//       </Container>\r\n//     </ContentLayout>\r\n//     <div style={{ border: '1px solid black', padding: '10px' , margin:'10px', borderRadius:'5px' }}>\r\n \r\n\r\n//                   <MixedLineBarChart\r\n//       series={[\r\n//         {\r\n//           title: \"Costs\",\r\n//           type: \"bar\",\r\n//           data: [\r\n//             { x: \"Jun 2019\", y: 6562 },\r\n//             { x: \"Jul 2019\", y: 8768 },\r\n//             { x: \"Aug 2019\", y: 9742 },\r\n//             { x: \"Sep 2019\", y: 10464 },\r\n//             { x: \"Oct 2019\", y: 16777 },\r\n//             { x: \"Nov 2019\", y: 9956 },\r\n//             { x: \"Dec 2019\", y: 5876 }\r\n//           ],\r\n//           valueFormatter: e =>\r\n//             \"$\" +\r\n//             e.toLocaleString(\"en-US\", {\r\n//               minimumFractionDigits: 2,\r\n//               maximumFractionDigits: 2\r\n//             })\r\n//         },\r\n//         {\r\n//           title: \"Costs last year\",\r\n//           type: \"line\",\r\n//           data: [\r\n//             { x: \"Jun 2019\", y: 5373 },\r\n//             { x: \"Jul 2019\", y: 7563 },\r\n//             { x: \"Aug 2019\", y: 7900 },\r\n//             { x: \"Sep 2019\", y: 12342 },\r\n//             { x: \"Oct 2019\", y: 14311 },\r\n//             { x: \"Nov 2019\", y: 11830 },\r\n//             { x: \"Dec 2019\", y: 8505 }\r\n//           ],\r\n//           valueFormatter: e =>\r\n//             \"$\" +\r\n//             e.toLocaleString(\"en-US\", {\r\n//               minimumFractionDigits: 2,\r\n//               maximumFractionDigits: 2\r\n//             })\r\n//         },\r\n//         {\r\n//           title: \"Budget\",\r\n//           type: \"threshold\",\r\n//           y: 12000,\r\n//           valueFormatter: e =>\r\n//             \"$\" +\r\n//             e.toLocaleString(\"en-US\", {\r\n//               minimumFractionDigits: 2,\r\n//               maximumFractionDigits: 2\r\n//             })\r\n//         },\r\n//         {\r\n//           title: \"Peak cost\",\r\n//           type: \"threshold\",\r\n//           x: \"Sep 2019\"\r\n//         }\r\n//       ]}\r\n//       xDomain={[\r\n//         \"Jun 2019\",\r\n//         \"Jul 2019\",\r\n//         \"Aug 2019\",\r\n//         \"Sep 2019\",\r\n//         \"Oct 2019\",\r\n//         \"Nov 2019\",\r\n//         \"Dec 2019\"\r\n//       ]}\r\n//       yDomain={[0, 20000]}\r\n//       i18nStrings={{\r\n//         yTickFormatter: function numberFormatter(e) {\r\n//           return Math.abs(e) >= 1e9\r\n//             ? (e / 1e9).toFixed(1).replace(/\\.0$/, \"\") +\r\n//                 \"G\"\r\n//             : Math.abs(e) >= 1e6\r\n//             ? (e / 1e6).toFixed(1).replace(/\\.0$/, \"\") +\r\n//               \"M\"\r\n//             : Math.abs(e) >= 1e3\r\n//             ? (e / 1e3).toFixed(1).replace(/\\.0$/, \"\") +\r\n//               \"K\"\r\n//             : e.toFixed(2);\r\n//         }\r\n//       }}\r\n//       detailPopoverSeriesContent={({ series, x, y }) => ({\r\n//         key: series.title,\r\n//         // value: (\r\n//         //   // <Link\r\n//         //   //   external=\"true\"\r\n//         //   //   href=\"#\"\r\n//         //   //   ariaLabel={`See details for ${moneyFormatter(\r\n//         //   //     y\r\n//         //   //   )} on ${series.title} (opens in a new tab)`}\r\n//         //   // >\r\n//         //   //   {moneyFormatter(y)}\r\n//         //   // </Link>\r\n//         // )\r\n//       })}\r\n//       ariaLabel=\"Mixed bar chart\"\r\n//       height={300}\r\n//       xScaleType=\"categorical\"\r\n//       xTitle=\"Budget month\"\r\n//       yTitle=\"Costs (USD)\"\r\n//       empty={\r\n//         <Box textAlign=\"center\" color=\"inherit\">\r\n//           <b>No data available</b>\r\n//           <Box variant=\"p\" color=\"inherit\">\r\n//             There is no data available\r\n//           </Box>\r\n//         </Box>\r\n//       }\r\n//       noMatch={\r\n//         <Box textAlign=\"center\" color=\"inherit\">\r\n//           <b>No matching data</b>\r\n//           <Box variant=\"p\" color=\"inherit\">\r\n//             There is no matching data to display\r\n//           </Box>\r\n//           <Button>Clear filter</Button>\r\n//         </Box>\r\n//       }\r\n//     />\r\n   \r\n// </div>\r\n\r\n// <div style={{ border: '1px solid gray', padding: '10px', margin:'10px', borderRadius:'5px' }}>\r\n\r\n//                 <AreaChart\r\n//       series={[\r\n//         {\r\n//           title: \"Network 1\",\r\n//           type: \"area\",\r\n//           data: [\r\n//             { x: new Date(1600972200000), y: 114489 },\r\n//             { x: new Date(1600973100000), y: 136935 },\r\n//             { x: new Date(1600974000000), y: 141026 },\r\n//             { x: new Date(1600974900000), y: 123288 },\r\n//             { x: new Date(1600975800000), y: 121956 },\r\n//             { x: new Date(1600976700000), y: 119868 },\r\n//             { x: new Date(1600977600000), y: 132326 },\r\n//             { x: new Date(1600978500000), y: 126879 },\r\n//             { x: new Date(1600979400000), y: 138543 },\r\n//             { x: new Date(1600980300000), y: 144309 },\r\n//             { x: new Date(1600981200000), y: 121118 },\r\n//             { x: new Date(1600982100000), y: 113430 },\r\n//             { x: new Date(1600983000000), y: 135911 },\r\n//             { x: new Date(1600983900000), y: 113126 },\r\n//             { x: new Date(1600984800000), y: 119538 },\r\n//             { x: new Date(1600985700000), y: 124338 },\r\n//             { x: new Date(1600986600000), y: 133884 },\r\n//             { x: new Date(1600987500000), y: 135473 },\r\n//             { x: new Date(1600988400000), y: 131187 },\r\n//             { x: new Date(1600989300000), y: 136176 },\r\n//             { x: new Date(1600990200000), y: 144422 },\r\n//             { x: new Date(1600991100000), y: 115392 },\r\n//             { x: new Date(1600992000000), y: 139307 },\r\n//             { x: new Date(1600992900000), y: 128517 },\r\n//             { x: new Date(1600993800000), y: 107160 },\r\n//             { x: new Date(1600994700000), y: 110283 },\r\n//             { x: new Date(1600995600000), y: 134513 },\r\n//             { x: new Date(1600996500000), y: 111311 },\r\n//             { x: new Date(1600997400000), y: 142686 },\r\n//             { x: new Date(1600998300000), y: 130652 },\r\n//             { x: new Date(1600999200000), y: 149418 },\r\n//             { x: new Date(1601000100000), y: 121923 }\r\n//           ],\r\n//           valueFormatter: function numberFormatter(e) {\r\n//             return Math.abs(e) >= 1e9\r\n//               ? (e / 1e9).toFixed(1).replace(/\\.0$/, \"\") +\r\n//                   \"G\"\r\n//               : Math.abs(e) >= 1e6\r\n//               ? (e / 1e6).toFixed(1).replace(/\\.0$/, \"\") +\r\n//                 \"M\"\r\n//               : Math.abs(e) >= 1e3\r\n//               ? (e / 1e3).toFixed(1).replace(/\\.0$/, \"\") +\r\n//                 \"K\"\r\n//               : e.toFixed(2);\r\n//           }\r\n//         },\r\n//         {\r\n//           title: \"Network 2\",\r\n//           type: \"area\",\r\n//           data: [\r\n//             { x: new Date(1600972200000), y: 10413 },\r\n//             { x: new Date(1600973100000), y: 26582 },\r\n//             { x: new Date(1600974000000), y: 45593 },\r\n//             { x: new Date(1600974900000), y: 65918 },\r\n//             { x: new Date(1600975800000), y: 76223 },\r\n//             { x: new Date(1600976700000), y: 62385 },\r\n//             { x: new Date(1600977600000), y: 83330 },\r\n//             { x: new Date(1600978500000), y: 127209 },\r\n//             { x: new Date(1600979400000), y: 104802 },\r\n//             { x: new Date(1600980300000), y: 145899 },\r\n//             { x: new Date(1600981200000), y: 121375 },\r\n//             { x: new Date(1600982100000), y: 112968 },\r\n//             { x: new Date(1600983000000), y: 145263 },\r\n//             { x: new Date(1600983900000), y: 139562 },\r\n//             { x: new Date(1600984800000), y: 128343 },\r\n//             { x: new Date(1600985700000), y: 122774 },\r\n//             { x: new Date(1600986600000), y: 145396 },\r\n//             { x: new Date(1600987500000), y: 176509 },\r\n//             { x: new Date(1600988400000), y: 201006 },\r\n//             { x: new Date(1600989300000), y: 196538 },\r\n//             { x: new Date(1600990200000), y: 213773 },\r\n//             { x: new Date(1600991100000), y: 205076 },\r\n//             { x: new Date(1600992000000), y: 216369 },\r\n//             { x: new Date(1600992900000), y: 159386 },\r\n//             { x: new Date(1600993800000), y: 238852 },\r\n//             { x: new Date(1600994700000), y: 207500 },\r\n//             { x: new Date(1600995600000), y: 187110 },\r\n//             { x: new Date(1600996500000), y: 314165 },\r\n//             { x: new Date(1600997400000), y: 165653 },\r\n//             { x: new Date(1600998300000), y: 175584 },\r\n//             { x: new Date(1600999200000), y: 230042 },\r\n//             { x: new Date(1601000100000), y: 293879 }\r\n//           ],\r\n//           valueFormatter: function numberFormatter(e) {\r\n//             return Math.abs(e) >= 1e9\r\n//               ? (e / 1e9).toFixed(1).replace(/\\.0$/, \"\") +\r\n//                   \"G\"\r\n//               : Math.abs(e) >= 1e6\r\n//               ? (e / 1e6).toFixed(1).replace(/\\.0$/, \"\") +\r\n//                 \"M\"\r\n//               : Math.abs(e) >= 1e3\r\n//               ? (e / 1e3).toFixed(1).replace(/\\.0$/, \"\") +\r\n//                 \"K\"\r\n//               : e.toFixed(2);\r\n//           }\r\n//         }\r\n//       ]}\r\n//       xDomain={[\r\n//         new Date(1600972200000),\r\n//         new Date(1601000100000)\r\n//       ]}\r\n//       yDomain={[0, 500000]}\r\n//       i18nStrings={{\r\n//         xTickFormatter: e =>\r\n//           e\r\n//             .toLocaleDateString(\"en-US\", {\r\n//               month: \"short\",\r\n//               day: \"numeric\",\r\n//               hour: \"numeric\",\r\n//               minute: \"numeric\",\r\n//               hour12: !1\r\n//             })\r\n//             .split(\",\")\r\n//             .join(\"\\n\"),\r\n//         yTickFormatter: function numberFormatter(e) {\r\n//           return Math.abs(e) >= 1e9\r\n//             ? (e / 1e9).toFixed(1).replace(/\\.0$/, \"\") +\r\n//                 \"G\"\r\n//             : Math.abs(e) >= 1e6\r\n//             ? (e / 1e6).toFixed(1).replace(/\\.0$/, \"\") +\r\n//               \"M\"\r\n//             : Math.abs(e) >= 1e3\r\n//             ? (e / 1e3).toFixed(1).replace(/\\.0$/, \"\") +\r\n//               \"K\"\r\n//             : e.toFixed(2);\r\n//         }\r\n//       }}\r\n//       ariaLabel=\"Stacked area chart\"\r\n//       height={300}\r\n//       hideFilter\r\n//       xScaleType=\"time\"\r\n//       xTitle=\"Time (UTC)\"\r\n//       yTitle=\"Bytes transferred\"\r\n//       empty={\r\n//         <Box textAlign=\"center\" color=\"inherit\">\r\n//           <b>No data available</b>\r\n//           <Box variant=\"p\" color=\"inherit\">\r\n//             There is no data available\r\n//           </Box>\r\n//         </Box>\r\n//       }\r\n//       noMatch={\r\n//         <Box textAlign=\"center\" color=\"inherit\">\r\n//           <b>No matching data</b>\r\n//           <Box variant=\"p\" color=\"inherit\">\r\n//             There is no matching data to display\r\n//           </Box>\r\n//           <Button>Clear filter</Button>\r\n//         </Box>\r\n//       }\r\n//     />\r\n//     </div>\r\n//                   {/* Bar Chart */}\r\n//                   <BarChart\r\n//       series={[\r\n//         {\r\n//           title: \"Site 1\",\r\n//           type: \"bar\",\r\n//           data: [\r\n//             { x: new Date(1601058600000), y: 34503 },\r\n//             { x: new Date(1601065800000), y: 25832 },\r\n//             { x: new Date(1601073000000), y: 4012 },\r\n//             { x: new Date(1601080200000), y: -5602 },\r\n//             { x: new Date(1601087400000), y: 17839 }\r\n//           ],\r\n//           valueFormatter: e =>\r\n//             \"$\" +\r\n//             e.toLocaleString(\"en-US\", {\r\n//               minimumFractionDigits: 2,\r\n//               maximumFractionDigits: 2\r\n//             })\r\n//         },\r\n//         {\r\n//           title: \"Average revenue\",\r\n//           type: \"threshold\",\r\n//           y: 19104,\r\n//           valueFormatter: e =>\r\n//             \"$\" +\r\n//             e.toLocaleString(\"en-US\", {\r\n//               minimumFractionDigits: 2,\r\n//               maximumFractionDigits: 2\r\n//             })\r\n//         }\r\n//       ]}\r\n//       xDomain={[\r\n//         new Date(1601058600000),\r\n//         new Date(1601065800000),\r\n//         new Date(1601073000000),\r\n//         new Date(1601080200000),\r\n//         new Date(1601087400000)\r\n//       ]}\r\n//       yDomain={[-10000, 40000]}\r\n//       i18nStrings={{\r\n//         xTickFormatter: e =>\r\n//           e\r\n//             .toLocaleDateString(\"en-US\", {\r\n//               month: \"short\",\r\n//               day: \"numeric\",\r\n//               hour: \"numeric\",\r\n//               minute: \"numeric\",\r\n//               hour12: !1\r\n//             })\r\n//             .split(\",\")\r\n//             .join(\"\\n\"),\r\n//         yTickFormatter: function numberFormatter(e) {\r\n//           return Math.abs(e) >= 1e9\r\n//             ? (e / 1e9).toFixed(1).replace(/\\.0$/, \"\") +\r\n//                 \"G\"\r\n//             : Math.abs(e) >= 1e6\r\n//             ? (e / 1e6).toFixed(1).replace(/\\.0$/, \"\") +\r\n//               \"M\"\r\n//             : Math.abs(e) >= 1e3\r\n//             ? (e / 1e3).toFixed(1).replace(/\\.0$/, \"\") +\r\n//               \"K\"\r\n//             : e.toFixed(2);\r\n//         }\r\n//       }}\r\n//       ariaLabel=\"Single data series line chart\"\r\n//       height={300}\r\n//       xTitle=\"Time (UTC)\"\r\n//       yTitle=\"Revenue (USD)\"\r\n//       empty={\r\n//         <Box textAlign=\"center\" color=\"inherit\">\r\n//           <b>No data available</b>\r\n//           <Box variant=\"p\" color=\"inherit\">\r\n//             There is no data available\r\n//           </Box>\r\n//         </Box>\r\n//       }\r\n//       noMatch={\r\n//         <Box textAlign=\"center\" color=\"inherit\">\r\n//           <b>No matching data</b>\r\n//           <Box variant=\"p\" color=\"inherit\">\r\n//             There is no matching data to display\r\n//           </Box>\r\n//           <Button>Clear filter</Button>\r\n//         </Box>\r\n//       }\r\n//     />\r\n\r\n//                   {/* Table */}\r\n                 \r\n//        <PieChart\r\n//       data={[\r\n//         {\r\n//           title: \"Running\",\r\n//           value: 60,\r\n//           lastUpdate: \"Dec 7, 2020\"\r\n//         },\r\n//         {\r\n//           title: \"Failed\",\r\n//           value: 30,\r\n//           lastUpdate: \"Dec 6, 2020\"\r\n//         },\r\n//         {\r\n//           title: \"In-progress\",\r\n//           value: 10,\r\n//           lastUpdate: \"Dec 6, 2020\"\r\n//         },\r\n//         {\r\n//           title: \"Pending\",\r\n//           value: 0,\r\n//           lastUpdate: \"Dec 7, 2020\"\r\n//         }\r\n//       ]}\r\n//       detailPopoverContent={(datum, sum) => [\r\n//         { key: \"Resource count\", value: datum.value },\r\n//         {\r\n//           key: \"Percentage\",\r\n//           value: `${((datum.value / sum) * 100).toFixed(\r\n//             0\r\n//           )}%`\r\n//         },\r\n//         { key: \"Last update on\", value: datum.lastUpdate }\r\n//       ]}\r\n//       segmentDescription={(datum, sum) =>\r\n//         `${datum.value} units, ${(\r\n//           (datum.value / sum) *\r\n//           100\r\n//         ).toFixed(0)}%`\r\n//       }\r\n//       ariaDescription=\"Pie chart showing how many resources are currently in which state.\"\r\n//       ariaLabel=\"Pie chart\"\r\n//       empty={\r\n//         <Box textAlign=\"center\" color=\"inherit\">\r\n//           <b>No data available</b>\r\n//           <Box variant=\"p\" color=\"inherit\">\r\n//             There is no data available\r\n//           </Box>\r\n//         </Box>\r\n//       }\r\n//       noMatch={\r\n//         <Box textAlign=\"center\" color=\"inherit\">\r\n//           <b>No matching data</b>\r\n//           <Box variant=\"p\" color=\"inherit\">\r\n//             There is no matching data to display\r\n//           </Box>\r\n//           <Button>Clear filter</Button>\r\n//         </Box>\r\n//       }\r\n//     />\r\n\r\n//                 </div>\r\n//               </Container>\r\n//             </ContentLayout>\r\n//           }\r\n//           splitPanel={<SplitPanel header=\"Split panel header\">Split panel content</SplitPanel>}\r\n//         />\r\n//       </I18nProvider>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default UserDashboard;\r\n\r\nimport React, { Component } from \"react\";\r\n\r\nclass Dashboard extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"main-container\">\r\n        \r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default Dashboard;\r\n"],"names":["Dashboard","Component","render","_jsx","className"],"sourceRoot":""}